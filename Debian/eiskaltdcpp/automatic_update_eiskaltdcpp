#!/bin/sh


############################# Some options ##############################################
export PACKAGE="eiskaltdcpp"

# Uncomment if necessary:
export SFX="-2"


############################# General part of script body ###############################
# experimental unstable
export MAIN_DIST="unstable"

if [ -z "${SFX}" ]; then
    export SFX="-1"
fi

export MAIN_DIR="${HOME}/WorkDir/Devel/deb_packages"

export PKG_DIR="${MAIN_DIR}/Debian/${PACKAGE}"
export TEMP_DIR="${PKG_DIR}/TEMP"
export TEST_DIR="${TEMP_DIR}/TEST"

mkdir -p "${TEMP_DIR}" && cd "${TEMP_DIR}"


############################# Specific part of script body ##############################
export OLD_VER_FULL=$(head -n 1 "${PKG_DIR}/debian/changelog" | sed -e "s/.* (\(.*\)) .*/\1/")
export OLD_VER=$(echo ${OLD_VER_FULL} | sed -e "s/^\(.*\)-[0-9]$/\1/")
export OLD_SFX=$(echo ${OLD_VER_FULL} | sed -e "s/^.*\(-[0-9]\)$/\1/")

export VER_LIST=$(curl 'http://code.google.com/p/eiskaltdc/downloads/list' 2>&1 | grep '"http://eiskaltdc.googlecode.com/files/eiskaltdcpp-' | grep '.tar.bz2"' | sed -e "s:^.*eiskaltdc.googlecode.com/files/eiskaltdcpp-\(.*\).tar.bz2\".*$:\1:")
export NEW_VER=$(echo ${VER_LIST}  | sed -e "s/ /#/" | sed -e "s/^\(.*\)#.*$/\1/")
export NEW_VER_FULL=${NEW_VER}${SFX}

echo " "
echo "http://sourceforge.net/projects/q4wine/files/q4wine/"
echo " "
echo "On sourceforge.net now available such versions:"
echo ${VER_LIST}
echo " "

echo "OLD_VER = ${OLD_VER}"
echo "NEW_VER = ${NEW_VER}"
echo "OLD_VER_FULL = ${OLD_VER_FULL}"
echo "NEW_VER_FULL = ${NEW_VER_FULL}"
echo " "

if [ -z "${NEW_VER}" ]; then
    echo "NEW_VER is empty!";
    exit 0;
elif [ -z "${OLD_VER_FULL}" ]; then
    echo "OLD_VER_FULL is empty!";
    exit 0;
elif [ "${NEW_VER_FULL}" = "${OLD_VER_FULL}" ]; then
    echo "Upgrading is not required.";
    exit 0;
else
    if !([ "${NEW_VER}" = "${OLD_VER}" ]); then
        if !([ "${SFX}" = "-1" ]); then
            echo "Now SFX = ${SFX} but must be '-1' for a new release!";
            exit 0;
        fi
    else
        if ([ "${SFX}" = "-1" ]); then
            echo "Now SFX = ${SFX} but OLD_SFX = ${OLD_SFX}.";
            echo "Upgrading is not required.";
            exit 0;
        fi
    fi
fi

if !([ -e "eiskaltdcpp-${NEW_VER}.tar.bz2" ]); then
    wget -4 "http://eiskaltdc.googlecode.com/files/eiskaltdcpp-${NEW_VER}.tar.bz2"
    rm -rf "eiskaltdcpp-${NEW_VER}"
    tar xjf "eiskaltdcpp-${NEW_VER}.tar.bz2"
    tar -czf "${PACKAGE}_${NEW_VER}.orig.tar.gz" "eiskaltdcpp-${NEW_VER}"
fi


############################# General part of script body ###############################
if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.gz" ]); then
    echo "File ${PACKAGE}_${NEW_VER}.orig.tar.gz is not found.";
    exit 0;
fi

echo "Updating is started."

export DEBEMAIL="Boris Pek <tehnick-8@mail.ru>"

rm -rf "${PACKAGE}-${NEW_VER}" "${PACKAGE}_${NEW_VER}-"*

tar xzf "${PACKAGE}_${NEW_VER}.orig.tar.gz"
cp -rf "${PKG_DIR}/debian" "${PACKAGE}-${NEW_VER}/"

cd "${TEMP_DIR}/${PACKAGE}-${NEW_VER}"

echo " "
echo "Uscan:"
uscan --report-status
echo " "

export DIST="${MAIN_DIST}"
if [ "${SFX}" = "-1" ]; then
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER_FULL}" \
        "Update to stable release ${NEW_VER}."
    kwrite debian/changelog
    debuild -S -sa
else
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER_FULL}" \
        "Some fixes in package."
    kwrite debian/changelog
    # debuild -S -sd
    debuild -S -sa
fi


case "${1}" in
        fast)

    echo " "
    echo "Fast upload (without tests)."
    echo " "

        ;;
        *)

    echo " "
    echo "Now will be tests."
    echo " "

    rm -rf "${TEST_DIR}"
    mkdir -p "${TEST_DIR}" && cd "${TEST_DIR}"

    cp -r "${TEMP_DIR}/${PACKAGE}-${NEW_VER}" "${TEST_DIR}/"
    cp -f "${TEMP_DIR}/${PACKAGE}_${NEW_VER}.orig.tar.gz" "${TEST_DIR}/"

    export BUILD_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.build.log"
    cd "${TEST_DIR}/${PACKAGE}-${NEW_VER}"
    echo " "
    echo "Start building packages..."
    dpkg-buildpackage -rfakeroot > ${BUILD_LOG_FILE}
    echo "Finished building packages."
    echo " "

    export LINTIAN_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.lintian.log"
    cd "${TEST_DIR}"
    echo " "
    echo "Now running lintian:"
    lintian -ivI ${PACKAGE}_${NEW_VER_FULL}_*.changes > ${LINTIAN_LOG_FILE}
    cat ${LINTIAN_LOG_FILE} | grep "E: "
    cat ${LINTIAN_LOG_FILE} | grep "W: "
    echo "Finished running lintian."
    echo " "
    kwrite ${LINTIAN_LOG_FILE}

    cd "${TEMP_DIR}/${PACKAGE}-${NEW_VER}"

        ;;
esac


kwrite debian/changelog


cd "${TEMP_DIR}"
cp -fr "${PACKAGE}-${NEW_VER}/debian" "${PKG_DIR}/"

dput -f mentors ${PACKAGE}_${NEW_VER_FULL}_source.changes

echo "Update finished successfully"

