#!/bin/bash


if [ -z "${MAIN_DIR}" ]; then
    export MAIN_DIR="${PWD}/$(dirname ${0})/../.."
fi

export PACKAGE="elmerfem"

# Uncomment if necessary:
export SFX="-0ppa3"

#export NEW_VER=6.1.0.svn.5396.dfsg2


# Launch common script for setting variables
source "${MAIN_DIR}/Launchpad/setting_variables"


# Get old version
GetOldVersion
export OLD_COMMIT=$(echo ${OLD_VER} | sed -e "s/^.*.svn.\([0-9]\+\).dfsg.*$/\1/")


# Find new version
export SVN_REPO="https://elmerfem.svn.sourceforge.net/svnroot/elmerfem/trunk"
export CUR_VER=$(curl "${SVN_REPO}/fem/configure" 2>&1 | grep "\ VERSION=" | sed -e "s/^ VERSION=\(.\+\)$/\1/")
if [ -z "${CUR_VER}" ]; then
    echo "Failed to define current version."
    exit 1
fi
if [ -z "${NEW_VER=}" ]; then
    export LAST_COMMIT=$(svn log "${SVN_REPO}" | head -n2 |grep "r[0-9]\+" | sed -e "s/^r\([0-9]\+\).*$/\1/")
    export NEW_VER="${CUR_VER}.svn.${LAST_COMMIT}+dfsg"
else
    export LAST_COMMIT=$(echo ${NEW_VER} | sed -e "s/^.*.svn.\([0-9]\+\).dfsg.*$/\1/")
fi
export NEW_VER_FULL=${NEW_VER}${SFX}${UBUNTU_SFX}


echo "https://elmerfem.svn.sourceforge.net/svnroot/elmerfem/trunk/"
echo ;
# Display versions
DisplayVersionsUnstable


# Print versions
PrintVersions "${@}"


# Check versions
CheckVersionsUnstable


# Get the sources
if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.xz" ]); then
    "${PKG_DIR}/${PACKAGE}-debian/debian/elmerfem_get-orig-source.sh" "${NEW_VER}" || exit 1
fi


export UPDATE_STRING="New upstream revision."

export DESTINATION="elmerfem"

export DIST_LIST="precise"

export A_TYPE="xz"
export D_ARGS="xJf"

export CLEAN_BUILD="true"

# Launch common script for updating packages and uploading them to mentors.debian.net
source "${MAIN_DIR}/Launchpad/updating_packages"

