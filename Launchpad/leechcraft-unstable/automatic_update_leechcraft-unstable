#!/bin/bash


if [ -z "${MAIN_DIR}" ]; then
    export MAIN_DIR="${PWD}/$(dirname ${0})/../.."
fi

export PACKAGE="leechcraft-unstable"

# Uncomment if necessary:
#export SFX="-0ppa2"

#export NEW_VER=0.4.90-744-gda59196

export BRANCH=master


# Launch common script for setting variables
source "${MAIN_DIR}/Launchpad/setting_variables"


# Get old version
export OLD_VER_FULL=$(head -n 1 "${PKG_DIR}/${PACKAGE}-debian/debian/changelog" | sed -e "s/.* (\(.*\)) .*/\1/")
export OLD_VER=$(echo ${OLD_VER_FULL} | sed -e "s/^\(.*\)-[0-9]ppa.*$/\1/")
export OLD_SFX=$(echo ${OLD_VER_FULL} | sed -e "s/^.*\(-[0-9]ppa[0-9]\).*$/\1/")
export OLD_COMMIT=$(echo ${OLD_VER} | sed -e "s/^.*-[0-9]\+-g\(.*\)$/\1/")

# Find new version
export DEVELOPER=0xd34df00d
export PROJECT=leechcraft
export LAST_SRC_INFO=$(curl -I "https://nodeload.github.com/${DEVELOPER}/${PROJECT}/tarball/${BRANCH}" 2>&1)
export LAST_SRC=$(echo "${LAST_SRC_INFO}" | grep 'Content-Disposition:' | sed -e "s/.*\(${DEVELOPER}-${PROJECT}.*\).tar.gz.*/\1/")
export LAST_COMMIT=$(echo "${LAST_SRC}" | sed -e "s/^${DEVELOPER}-${PROJECT}.*-[0-9]\+-g\(.*\)$/\1/")


# Display versions
echo "Old  commit ID: ${OLD_COMMIT}"
echo "Last commit ID: ${LAST_COMMIT}"

if [ -z "${NEW_VER}" ]; then
    export NEW_VER=$(echo ${LAST_SRC} | sed -e "s/^${DEVELOPER}-${PROJECT}-\(.*\)$/\1/")
fi
export NEW_VER_FULL=${NEW_VER}${SFX}${UBUNTU_SFX}


# Display versions
echo "OLD_VER_FULL = ${OLD_VER_FULL}"
echo "NEW_VER_FULL = ${NEW_VER_FULL}"


# Print versions
PrintVersions "${@}"


# Check versions
if [ -z "${NEW_VER}" ]; then
    echo "NEW_VER is empty!";
    exit 0;
elif [ -z "${OLD_VER_FULL}" ]; then
    echo "OLD_VER_FULL is empty!";
    exit 0;
elif [ "${NEW_VER_FULL}" = "${OLD_VER_FULL}" ]; then
    echo "Upgrading is not required.";
    exit 0;
else
    if [ "${NEW_VER}" != "${OLD_VER}" ]; then
        if [ "${SFX}" != "-0ppa1" ]; then
            echo "Now SFX = ${SFX} but must be '-0ppa1' for a new release!";
            exit 0;
        fi
    else
        if [ "${SFX}" = "-0ppa1" ]; then
            echo "Now SFX = ${SFX} but OLD_SFX = ${OLD_SFX}.";
            echo "Upgrading is not required.";
            exit 0;
        fi
    fi
fi


# Get the sources
if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.bz2" ]); then
    rm -rf  "${PACKAGE}-${NEW_VER}"/
    # sources
    rm -f "${BRANCH}"*
    wget -4 -c "https://nodeload.github.com/${DEVELOPER}/${PROJECT}/tarball/${BRANCH}"
    rm -rf ${DEVELOPER}-${PROJECT}-*
    tar xzf "${BRANCH}"
    mv ${DEVELOPER}-${PROJECT}-* "${PACKAGE}-${NEW_VER}"
    # deleting some files and directories
    rm -r "${PACKAGE}-${NEW_VER}"/src/plugins/lcftp/
    rm -r "${PACKAGE}-${NEW_VER}"/src/plugins/cstp/resources/images/clients/*
    mv "${PACKAGE}-${NEW_VER}"/src/plugins/azoth/share/azoth/iconsets/clients/default/unknown.png \
       "${PACKAGE}-${NEW_VER}"/src/plugins/azoth/share/azoth/iconsets/clients/unknown.png
    rm "${PACKAGE}-${NEW_VER}"/src/plugins/azoth/share/azoth/iconsets/clients/default/*
    mv "${PACKAGE}-${NEW_VER}"/src/plugins/azoth/share/azoth/iconsets/clients/unknown.png \
       "${PACKAGE}-${NEW_VER}"/src/plugins/azoth/share/azoth/iconsets/clients/default/unknown.png
    # tarball
    tar -cjf "${PACKAGE}_${NEW_VER}.orig.tar.bz2" "${PACKAGE}-${NEW_VER}"
fi


export UPDATE_STRING="Minor update from GIT ${BRANCH} branch."

export DESTINATION="leechcraft-unstable"

export DIST_LIST="oneiric"

# Launch common script for updating packages and uploading them to mentors.debian.net
source "${MAIN_DIR}/Launchpad/updating_packages"

