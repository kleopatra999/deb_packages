#!/bin/bash

# This is the common script for updating packages and uploading them to Launchpad
#
# It make such actions:
# 1) Update changelog.
# 2) Prepare sources to upload.
#    Build the package and check it using lintian (optional)
# 3) Upload sources to Launchpad


if [ -z "${PACKAGE}" ]; then
    echo "Error: PACKAGE variable is empty!";
    exit 1;
elif [ -z "${NEW_VER}" ]; then
    echo "Error: NEW_VER variable is empty!";
    exit 1;
fi


if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.bz2" ]); then
    echo "File ${PACKAGE}_${NEW_VER}.orig.tar.bz2 is not found.";
    exit 0;
fi

if [ -z "${DIR_NAME}" ]; then
    export DIR_NAME="${PACKAGE}-${NEW_VER}"
fi

if [ -z "${OLD_DIR_NAME}" ]; then
    export OLD_DIR_NAME="${PACKAGE}-${OLD_VER}"
fi


echo "Updating is started."

export DEBEMAIL="Boris Pek <tehnick-8@mail.ru>"

rm -rf "${DIR_NAME}" "${PACKAGE}_${NEW_VER}-"*

tar xjf "${PACKAGE}_${NEW_VER}.orig.tar.bz2"
rm -rf "${DIR_NAME}/debian"
cp -rf "${PKG_DIR}/${PACKAGE}-debian/debian" "${DIR_NAME}/debian"

if ([ -d "${OLD_DIR_NAME}" ]); then
    diff -urN "${OLD_DIR_NAME}" "${DIR_NAME}" > \
              "${TEMP_DIR}/${OLD_VER_FULL}::${NEW_VER_FULL}.diff"
fi

cd "${TEMP_DIR}/${DIR_NAME}"

# If you want to build package on your system uncomment this:
# dch -v "$NEW_VER-mybuild1" "Minor update."
# dpkg-buildpackage -rfakeroot

# Note: I am using gnupg-agent for comfortable work

# Full list of Ubuntu releases:
# hardy intrepid jaunty karmic lucid maverick natty oneiric precise
# But not all of them are available, see: https://launchpad.net/ubuntu/+ppas

# begin update for basic releases
export DIST="${MAIN_DIST}"
if [ "${SFX}" = "-0ppa1" ]; then
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER}${SFX}~${DIST}1" \
        "${UPDATE_STRING}"
    if [ "${1}" = "test" ]; then kwrite debian/changelog; fi
    nice -n19 debuild -S -sa || exit 1
else
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER}${SFX}~${DIST}1" \
        "Some fixes in package."
    kwrite debian/changelog
    # debuild -S -sd
    nice -n19 debuild -S -sa || exit 1
fi
# end update for basic releases

# begin update for other releases
cp -f debian/changelog ../changelog # copy basic changelog

if [ -z "${DIST_LIST}" ]; then
    DIST_LIST="oneiric
               natty
               maverick
               lucid
               karmic"
    export DIST_LIST;
fi

for DIST in ${DIST_LIST} ; do
    cp -f ../changelog debian/changelog
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER}${SFX}~${DIST}1" \
        "Automated backport upload; no source changes."
    nice -n19 debuild -S -sd || exit 1
done

mv ../changelog debian/changelog # rollback basic changelog
# end update for other releases


if [ "${1}" = "test" ]; then
    echo ;
    echo "Now will be tests."
    echo ;

    rm -rf "${TEST_DIR}"
    mkdir -p "${TEST_DIR}" && cd "${TEST_DIR}"

    cp -r "${TEMP_DIR}/${DIR_NAME}" "${TEST_DIR}/"
    cp -f "${TEMP_DIR}/${PACKAGE}_${NEW_VER}.orig.tar.bz2" "${TEST_DIR}/"

    export BUILD_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.build.log"
    export WARNINGS_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.warnings.log"
    cd "${TEST_DIR}/${DIR_NAME}"
    echo ;
    echo "Start building packages..."
    time nice -n19 dpkg-buildpackage -rfakeroot > ${BUILD_LOG_FILE} 2> ${WARNINGS_LOG_FILE}
    cat  ${WARNINGS_LOG_FILE}
    echo "Finished building packages."
    echo ;

    export LINTIAN_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.lintian.log"
    cd "${TEST_DIR}"
    echo ;
    echo "Now running lintian:"
    time nice -n19 lintian -ivIE --pedantic ${PACKAGE}_${NEW_VER_FULL}_*.changes > ${LINTIAN_LOG_FILE}
    grep "E: " "${LINTIAN_LOG_FILE}"
    grep "W: " "${LINTIAN_LOG_FILE}"
    grep "I: " "${LINTIAN_LOG_FILE}"
    grep "P: " "${LINTIAN_LOG_FILE}"
    echo "Finished running lintian."
    echo ;
    kwrite ${LINTIAN_LOG_FILE}

    cd "${TEMP_DIR}/${DIR_NAME}"
fi


cd "${TEMP_DIR}"
cp -fr "${DIR_NAME}/debian" "${PKG_DIR}/${PACKAGE}-debian/"

if [ -z "${DESTINATION}" ]; then
    export DESTINATION="tehnick"
fi

for DIST in ${MAIN_DIST} ${DIST_LIST} ; do
    dput -f ${DESTINATION} ${PACKAGE}_${NEW_VER}${SFX}~${DIST}1_source.changes
done

echo "Update finished successfully"

