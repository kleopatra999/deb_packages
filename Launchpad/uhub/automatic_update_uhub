#!/bin/bash

export MAIN_DIR="${HOME}/WorkDir/Devel/deb_packages"

export PACKAGE="uhub"

# Uncomment if necessary:
export SFX="-1ppa1"


# Launch common script for setting variables
source "${MAIN_DIR}/Launchpad/setting_variables"


# Check versions
export OLD_VER_FULL=$(head -n 1 "${PKG_DIR}/debian/changelog" | sed -e "s/.* (\(.*\)) .*/\1/")
export OLD_VER=$(echo ${OLD_VER_FULL} | sed -e "s/^\(.*\)-[0-9]ppa.*$/\1/")
export OLD_SFX=$(echo ${OLD_VER_FULL} | sed -e "s/^.*\(-[0-9]ppa[0-9]\).*$/\1/")

export DEVELOPER=janvidar
export PROJECT=uhub
export VER_LIST=$(curl "https://github.com/${DEVELOPER}/${PROJECT}/downloads" 2>&1 | grep "=\"/${DEVELOPER}/${PROJECT}/tarball/" | sed -e "s:^.*\"/${DEVELOPER}/${PROJECT}/tarball/\(.*\)\">TAR\.GZ.*:\1:" | sed -e "s/show//")
export NEW_VER=$(echo ${VER_LIST}  | sed -e "s/ /#/" | sed -e "s/^\(.*\)#.*$/\1/")
export NEW_VER_FULL=${NEW_VER}${SFX}${UBUNTU_SFX}

echo " "
echo "https://github.com/${DEVELOPER}/${PROJECT}/downloads"
echo " "
echo "On github.com now available such versions:"
echo ${VER_LIST}
echo " "

echo "OLD_VER = ${OLD_VER}"
echo "NEW_VER = ${NEW_VER}"
echo "OLD_VER_FULL = ${OLD_VER_FULL}"
echo "NEW_VER_FULL = ${NEW_VER_FULL}"
echo " "

if [ -z "${NEW_VER}" ]; then
    echo "NEW_VER is empty!";
    exit 0;
elif [ -z "${OLD_VER_FULL}" ]; then
    echo "OLD_VER_FULL is empty!";
    exit 0;
elif [ "${NEW_VER_FULL}" = "${OLD_VER_FULL}" ]; then
    echo "Upgrading is not required.";
    exit 0;
else
    if !([ "${NEW_VER}" = "${OLD_VER}" ]); then
        if !([ "${SFX}" = "-0ppa1" ]); then
            echo "Now SFX = ${SFX} but must be '-0ppa1' for a new release!";
            exit 0;
        fi
    else
        if ([ "${SFX}" = "-0ppa1" ]); then
            echo "Now SFX = ${SFX} but OLD_SFX = ${OLD_SFX}.";
            echo "Upgrading is not required.";
            exit 0;
        fi
    fi
fi


# Get the sources
if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.bz2" ]); then
    rm -rf  "${NEW_VER}"/ "${PACKAGE}-${NEW_VER}"/
    # sources
    wget -4 -c "http://nodeload.github.com/${DEVELOPER}/${PROJECT}/tarball/${NEW_VER}"
    rm -rf ${DEVELOPER}-${PROJECT}-*
    tar xzf "${NEW_VER}"
    mv ${DEVELOPER}-${PROJECT}-* "${PACKAGE}-${NEW_VER}"
    rm -rf "${PACKAGE}-${NEW_VER}/debian"
    # tarball
    rm -rf "${PACKAGE}-${NEW_VER}"/doc
    rm -rf "${PACKAGE}-${NEW_VER}"/iconsets
    tar -cjf "${PACKAGE}_${NEW_VER}.orig.tar.bz2" "${PACKAGE}-${NEW_VER}"
fi


export UPDATE_STRING="Update to stable release ${NEW_VER}."

# Launch common script for updating packages and uploading them to Launchpad
source "${MAIN_DIR}/Launchpad/updating_packages"

