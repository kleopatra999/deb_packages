#!/bin/bash


if [ -z "${MAIN_DIR}" ]; then
    if [[ ${0} =~ ^/.+$ ]]; then
        export MAIN_DIR="$(dirname ${0})/../.."
    else
        export MAIN_DIR="${PWD}/$(dirname ${0})/../.."
    fi
fi

export PACKAGE="freedcpp-unstable"

# Uncomment if necessary:
#export SFX="-0ppa6"


# Launch common script for setting variables
source "${MAIN_DIR}/Launchpad/setting_variables"


# Get old version
GetOldVersion
export OLD_COMMIT=$(echo ${OLD_VER} | sed -e "s/^.*~svn\([0-9]\+\)$/\1/")


# Find new version
export LAST_COMMIT=$(svn log http://freedcpp.googlecode.com/svn/trunk/ | head -n2 |grep "r[0-9]\+" | sed -e "s/^r\([0-9]\+\).*$/\1/")

export CUR_VER=$(curl "http://freedcpp.googlecode.com/svn/trunk/linux/version.hh" 2>&1 | grep "GUI_VERSION_STRING " | sed -e "s/^.*GUI_VERSION_STRING \"\(.*\+\)\"$/\1/")
export BUILD_STRING=$(curl "http://freedcpp.googlecode.com/svn/trunk/linux/version.hh" 2>&1 | grep "GUI_VERSION_BUILD_STRING " | sed -e "s/^.*GUI_VERSION_BUILD_STRING \"\(.*\+\)\"$/\1/")
export NEW_VER="${CUR_VER}.${BUILD_STRING}~svn${LAST_COMMIT}"
export NEW_VER_FULL="${NEW_VER}${SFX}${UBUNTU_SFX}"


# Display versions
DisplayVersionsUnstable


# Print versions
PrintVersions "${@}"


# Check versions
if [ -z ${BUILD_STRING} ]; then
    echo "BUILD_STRING is empty!";
    exit 1;
fi
CheckVersionsUnstable


# Get the sources
if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.xz" ]); then
    # Begin local updating
    export SVN_DIR="${HOME}/WorkDir/Devel/FreeDC++/freedcpp_trunk/"
    svn update "${SVN_DIR}"
    svn export "${SVN_DIR}" "freedcpp-unstable-${NEW_VER}"
    # End local updating
    # Or you can use:
    # svn export http://freedcpp.googlecode.com/svn/trunk/ "freedcpp-unstable-$NEW_VER/"
    tar -cJf "${PACKAGE}_${NEW_VER}.orig.tar.xz" "${PACKAGE}-${NEW_VER}"
fi


export UPDATE_STRING="Minor update from SVN trunk branch."

export A_TYPE="xz"
export D_ARGS="xJf"

# Launch common script for updating packages and uploading them to Launchpad
source "${MAIN_DIR}/Launchpad/updating_packages"

