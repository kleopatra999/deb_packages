#!/bin/bash


############################# Some options ##############################################
export PACKAGE="freedcpp-unstable"

# Uncomment if necessary:
#export SFX="-0ppa6"


############################# General part of script body ###############################
export MAIN_DIST="oneiric"
export UBUNTU_SFX="~${MAIN_DIST}1"

if [ -z "${SFX}" ]; then
    export SFX="-0ppa1"
fi

export MAIN_DIR="${HOME}/WorkDir/Devel/deb_packages"

export PKG_DIR="${MAIN_DIR}/Launchpad/${PACKAGE}"
export TEMP_DIR="${PKG_DIR}/TEMP"
export TEST_DIR="${TEMP_DIR}/TEST"

mkdir -p "${TEMP_DIR}" && cd "${TEMP_DIR}"


############################# Specific part of script body ##############################
export OLD_VER_FULL=$(head -n 1 "${PKG_DIR}/debian/changelog" | sed -e "s/.* (\(.*\)) .*/\1/")
export OLD_VER=$(echo ${OLD_VER_FULL} | sed -e "s/^\(.*\)-0ppa.*$/\1/")
export OLD_SFX=$(echo ${OLD_VER_FULL} | sed -e "s/^.*\(-[0-9]ppa[0-9]\).*$/\1/")
export OLD_REVISION=$(echo ${OLD_VER} | sed -e "s/^.*~svn\([0-9]\+\)$/\1/")

#export LAST_REVISION=$(svn log http://freedcpp.googlecode.com/svn/trunk/ -r HEAD --quiet |grep "r[0-9]\+" | sed -e "s/^r\([0-9]\+\).*$/\1/")
export LAST_REVISION=$(svn log http://freedcpp.googlecode.com/svn/trunk/ | head -n2 |grep "r[0-9]\+" | sed -e "s/^r\([0-9]\+\).*$/\1/")

echo "Number of old  revision: ${OLD_REVISION}"
echo "Number of last revision: ${LAST_REVISION}"

export CUR_VER=$(curl "http://freedcpp.googlecode.com/svn/trunk/linux/version.hh" 2>&1 | grep "GUI_VERSION_STRING " | sed -e "s/^.*GUI_VERSION_STRING \"\(.*\+\)\"$/\1/")
export BUILD_STRING=$(curl "http://freedcpp.googlecode.com/svn/trunk/linux/version.hh" 2>&1 | grep "GUI_VERSION_BUILD_STRING " | sed -e "s/^.*GUI_VERSION_BUILD_STRING \"\(.*\+\)\"$/\1/")
export NEW_VER="${CUR_VER}.${BUILD_STRING}~svn${LAST_REVISION}"
export NEW_VER_FULL="${NEW_VER}${SFX}${UBUNTU_SFX}"


echo "OLD_VER_FULL = ${OLD_VER_FULL}"
echo "NEW_VER_FULL = ${NEW_VER_FULL}"


if [ -z "${OLD_VER_FULL}" ]; then
    echo "OLD_VER_FULL is empty!";
    exit 0;
elif [ -z ${CUR_VER} ]; then
    echo "CUR_VER is empty!";
    exit 0;
elif [ -z ${BUILD_STRING} ]; then
    echo "BUILD_STRING is empty!";
    exit 0;
elif [ -z ${LAST_REVISION} ]; then
    echo "LAST_REVISION is empty!";
    exit 0;
elif [ "${NEW_VER_FULL}" = "${OLD_VER_FULL}" ]; then
    echo "Upgrading is not required.";
    exit 0;
else
    if !([ "${NEW_VER}" = "${OLD_VER}" ]); then
        if !([ "${SFX}" = "-0ppa1" ]); then
            echo "Now SFX = ${SFX} but must be '-0ppa1' for a new release!";
            exit 0;
        fi
    else
        if ([ "${SFX}" = "-0ppa1" ]); then
            echo "Now SFX = ${SFX} but OLD_SFX = ${OLD_SFX}.";
            echo "Upgrading is not required.";
            exit 0;
        fi
    fi
fi

if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.bz2" ]); then
    # Begin local updating
    export SVN_DIR="${HOME}/WorkDir/Devel/FreeDC++/freedcpp_trunk/"
    svn update "${SVN_DIR}"
    svn export "${SVN_DIR}" "freedcpp-unstable-${NEW_VER}"
    # End local updating
    # Or you can use:
    # svn export http://freedcpp.googlecode.com/svn/trunk/ "freedcpp-unstable-$NEW_VER/"
    tar -czf "${PACKAGE}_${NEW_VER}.orig.tar.bz2" "${PACKAGE}-${NEW_VER}"
fi


############################# General part of script body ###############################
if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.bz2" ]); then
    echo "File ${PACKAGE}_${NEW_VER}.orig.tar.bz2 is not found.";
    exit 0;
fi

echo "Updating is started."

export DEBEMAIL="Boris Pek <tehnick-8@mail.ru>"

rm -rf "${PACKAGE}-${NEW_VER}" "${PACKAGE}_${NEW_VER}-"*

tar xjf "${PACKAGE}_${NEW_VER}.orig.tar.bz2"
cp -rf "${PKG_DIR}/debian" "${PACKAGE}-${NEW_VER}/"

if ([ -d "${PACKAGE}-${OLD_VER}" ]); then
    diff -ur "${PACKAGE}-${OLD_VER}" "${PACKAGE}-${NEW_VER}" > \
             "${TEMP_DIR}/${OLD_VER_FULL}::${NEW_VER_FULL}.diff"
fi

cd "${TEMP_DIR}/${PACKAGE}-${NEW_VER}"

# If you want to build package on your system uncomment this:
# dch -v "$NEW_VER-mybuild1" "Minor update."
# dpkg-buildpackage -rfakeroot

# Note: I am using gnupg-agent for comfortable work

# Full list of Ubuntu releases:
# hardy intrepid jaunty karmic lucid maverick natty oneiric
# But not all of them are available, see: https://launchpad.net/ubuntu/+ppas

# begin update for basic releases
export DIST="${MAIN_DIST}"
if [ "${SFX}" = "-0ppa1" ]; then
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER}${SFX}~${DIST}1" \
        "Minor update."
    debuild -S -sa
else
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER}${SFX}~${DIST}1" \
        "Some fixes in package."
    kwrite debian/changelog
    # debuild -S -sd
    debuild -S -sa
fi
# end update for basic releases

# begin update for other releases
cp -f debian/changelog ../changelog # copy basic changelog

for DIST in natty maverick lucid karmic ; do
    cp -f ../changelog debian/changelog
    dch -b --force-distribution --distribution "${DIST}" -v "${NEW_VER}${SFX}~${DIST}1" \
        "Automated backport upload; no source changes."
    debuild -S -sd
done

mv ../changelog debian/changelog # rollback basic changelog
# end update for other releases


case "${1}" in
        test)

    echo " "
    echo "Now will be tests."
    echo " "

    rm -rf "${TEST_DIR}"
    mkdir -p "${TEST_DIR}" && cd "${TEST_DIR}"

    cp -r "${TEMP_DIR}/${PACKAGE}-${NEW_VER}" "${TEST_DIR}/"
    cp -f "${TEMP_DIR}/${PACKAGE}_${NEW_VER}.orig.tar.bz2" "${TEST_DIR}/"

    export BUILD_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.build.log"
    export WARNINGS_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.warnings.log"
    cd "${TEST_DIR}/${PACKAGE}-${NEW_VER}"
    echo " "
    echo "Start building packages..."
    dpkg-buildpackage -rfakeroot > ${BUILD_LOG_FILE} 2> ${WARNINGS_LOG_FILE}
    echo "Finished building packages."
    echo " "

    export LINTIAN_LOG_FILE="${TEMP_DIR}/${PACKAGE}-${NEW_VER_FULL}.lintian.log"
    cd "${TEST_DIR}"
    echo " "
    echo "Now running lintian:"
    lintian -ivI ${PACKAGE}_${NEW_VER_FULL}_*.changes > ${LINTIAN_LOG_FILE}
    cat ${LINTIAN_LOG_FILE} | grep "E: "
    cat ${LINTIAN_LOG_FILE} | grep "W: "
    echo "Finished running lintian."
    echo " "
    kwrite ${LINTIAN_LOG_FILE}

    cd "${TEMP_DIR}/${PACKAGE}-${NEW_VER}"

        ;;
esac


cd "${TEMP_DIR}"
cp -fr "${PACKAGE}-${NEW_VER}/debian" "${PKG_DIR}/"

for DIST in oneiric natty maverick lucid karmic ; do
    dput -f ubuntu ${PACKAGE}_${NEW_VER}${SFX}~${DIST}1_source.changes
done

echo "Update finished successfully"

