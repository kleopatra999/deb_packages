#!/bin/bash


export MAIN_DIR="${HOME}/WorkDir/Devel/deb_packages"

export PACKAGE="freedcpp-mediapack"

# Uncomment if necessary:
#export SFX="-0ppa2"


# Launch common script for setting variables
source "${MAIN_DIR}/Launchpad/setting_variables"


# Get old version
export OLD_VER_FULL=$(head -n 1 "${PKG_DIR}/${PACKAGE}-debian/debian/changelog" | sed -e "s/.* (\(.*\)) .*/\1/")
export OLD_VER=$(echo ${OLD_VER_FULL} | sed -e "s/^\(.*\)-[0-9]ppa.*$/\1/")
export OLD_SFX=$(echo ${OLD_VER_FULL} | sed -e "s/^.*\(-[0-9]ppa[0-9]\).*$/\1/")


# Find new version
export VER_LIST=$(curl 'http://code.google.com/p/freedcpp/downloads/list' 2>&1 | grep '"http://freedcpp.googlecode.com/files/mediapack.' | grep '.tar.bz2"' | sed -e "s:^.*freedcpp.googlecode.com/files/mediapack.\(.*\).tar.bz2\".*$:\1:")
export NEW_VER=$(echo ${VER_LIST}  | sed -e "s/ /#/" | sed -e "s/^\(.*\)#.*$/\1/")
export NEW_VER_FULL=${NEW_VER}${SFX}${UBUNTU_SFX}


# Display versions
echo " "
echo "http://code.google.com/p/freedcpp/downloads/list"
echo " "
echo "On code.google.com now available such versions:"
echo ${VER_LIST}
echo " "

echo "OLD_VER = ${OLD_VER}"
echo "NEW_VER = ${NEW_VER}"
echo "OLD_VER_FULL = ${OLD_VER_FULL}"
echo "NEW_VER_FULL = ${NEW_VER_FULL}"
echo " "


# Print versions
if [ "${1}" = "print-versions" ]; then
    if [ -z "${2}" ]; then
        echo "File name must be not empty!"
        exit 1
    else
        HTML_FILE="${2}"
        echo "<td align=\"center\">" >> "${HTML_FILE}"
        echo "${PACKAGE}" >> "${HTML_FILE}"
        echo "</td>" >> "${HTML_FILE}"
        echo "<td align=\"center\">" >> "${HTML_FILE}"
        echo "${OLD_VER_FULL}" >> "${HTML_FILE}"
        echo "</td>" >> "${HTML_FILE}"
        echo "<td align=\"center\">" >> "${HTML_FILE}"
        echo "${NEW_VER_FULL}" >> "${HTML_FILE}"
        echo "</td>" >> "${HTML_FILE}"
        exit 0
    fi
fi


# Check versions
if [ -z "${NEW_VER}" ]; then
    echo "NEW_VER is empty!";
    exit 0;
elif [ -z "${OLD_VER_FULL}" ]; then
    echo "OLD_VER_FULL is empty!";
    exit 0;
elif [ "${NEW_VER_FULL}" = "${OLD_VER_FULL}" ]; then
    echo "Upgrading is not required.";
    exit 0;
else
    if [ "${NEW_VER}" != "${OLD_VER}" ]; then
        if [ "${SFX}" != "-0ppa1" ]; then
            echo "Now SFX = ${SFX} but must be '-0ppa1' for a new release!";
            exit 0;
        fi
    else
        if [ "${SFX}" = "-0ppa1" ]; then
            echo "Now SFX = ${SFX} but OLD_SFX = ${OLD_SFX}.";
            echo "Upgrading is not required.";
            exit 0;
        fi
    fi
fi


# Get the sources
if !([ -e "mediapack.${NEW_VER}.tar.bz2" ]); then
    wget -4 "http://freedcpp.googlecode.com/files/mediapack.${NEW_VER}.tar.bz2"
    rm -rf "${PACKAGE}-${NEW_VER}"
    tar xjf "mediapack.${NEW_VER}.tar.bz2"
    mv mediapack "${PACKAGE}-${NEW_VER}"
    tar -cjf "${PACKAGE}_${NEW_VER}.orig.tar.bz2" "${PACKAGE}-${NEW_VER}"
fi


export UPDATE_STRING="Update to stable release ${NEW_VER}."

# Launch common script for updating packages and uploading them to Launchpad
source "${MAIN_DIR}/Launchpad/updating_packages"

