#!/bin/bash


if [ -z "${MAIN_DIR}" ]; then
    export MAIN_DIR="${PWD}/$(dirname ${0})/../.."
fi

export PACKAGE="qxmpp"

# Uncomment if necessary:
export SFX="-0ppa3"


# Launch common script for setting variables
source "${MAIN_DIR}/Launchpad/setting_variables"


# Get old version
export OLD_VER_FULL=$(head -n 1 "${PKG_DIR}/${PACKAGE}-debian/debian/changelog" | sed -e "s/.* (\(.*\)) .*/\1/")
export OLD_VER=$(echo ${OLD_VER_FULL} | sed -e "s/^\(.*\)-[0-9]ppa.*$/\1/")
export OLD_SFX=$(echo ${OLD_VER_FULL} | sed -e "s/^.*\(-[0-9]ppa[0-9]\).*$/\1/")


# Find new version
export DEVELOPER=0xd34df00d
export PROJECT=qxmpp-dev
export VER_LIST=$(curl "https://github.com/${DEVELOPER}/${PROJECT}/downloads" 2>&1 | grep "=\"/downloads/${DEVELOPER}/${PROJECT}/" | grep "-extras.tar.bz2" | sed -e "s:^.*\"/downloads/${DEVELOPER}/${PROJECT}/qxmpp-\(.*\)-extras\.tar\.bz2\">.*:\1:")
export NEW_VER=$(echo "${VER_LIST}" | sort -r | head -n1)
export NEW_VER_FULL=${NEW_VER}${SFX}${UBUNTU_SFX}


# Display versions
echo ;
echo "https://github.com/${DEVELOPER}/${PROJECT}/downloads"
echo ;
echo "On github.com now available such versions:"
echo "${VER_LIST}" | sort -r | head -n50
echo ;

echo "OLD_VER = ${OLD_VER}"
echo "NEW_VER = ${NEW_VER}"
echo "OLD_VER_FULL = ${OLD_VER_FULL}"
echo "NEW_VER_FULL = ${NEW_VER_FULL}"
echo ;


# Check versions
if [ -z "${NEW_VER}" ]; then
    echo "NEW_VER is empty!";
    exit 0;
elif [ -z "${OLD_VER_FULL}" ]; then
    echo "OLD_VER_FULL is empty!";
    exit 0;
elif [ "${NEW_VER_FULL}" = "${OLD_VER_FULL}" ]; then
    echo "Upgrading is not required.";
    exit 0;
else
    if !([ "${NEW_VER}" = "${OLD_VER}" ]); then
        if !([ "${SFX}" = "-0ppa1" ]); then
            echo "Now SFX = ${SFX} but must be '-0ppa1' for a new release!";
            exit 0;
        fi
    else
        if ([ "${SFX}" = "-0ppa1" ]); then
            echo "Now SFX = ${SFX} but OLD_SFX = ${OLD_SFX}.";
            echo "Upgrading is not required.";
            exit 0;
        fi
    fi
fi


# Get the sources
if !([ -e "${PACKAGE}_${NEW_VER}.orig.tar.bz2" ]); then
    wget -4 -c "http://cloud.github.com/downloads/${DEVELOPER}/${PROJECT}/qxmpp-${NEW_VER}-extras.tar.bz2"
    mv -f "qxmpp-${NEW_VER}-extras.tar.bz2" "${PACKAGE}_${NEW_VER}.orig.tar.bz2"
fi


export UPDATE_STRING="Update to stable release ${NEW_VER}."

export DESTINATION="leechcraft-stable"

export DIST_LIST="oneiric
                  natty
                  maverick"

# Launch common script for updating packages and uploading them to mentors.debian.net
source "${MAIN_DIR}/Launchpad/updating_packages"

